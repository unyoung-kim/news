/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "./environments";
import * as core from "./core";
import * as MultiOn from "./api/index";
import { Sessions } from "./api/resources/sessions/client/Client";
export declare namespace MultiOnClient {
    interface Options {
        environment?: core.Supplier<environments.MultiOnEnvironment | string>;
        apiKey: core.Supplier<string>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
        abortSignal?: AbortSignal;
    }
}
export declare class MultiOnClient {
    protected readonly _options: MultiOnClient.Options;
    constructor(_options: MultiOnClient.Options);
    /**
     * Allows for browsing the web using detailed natural language commands.
     *
     * The function supports multi-step command execution based on the `CONTINUE` status of the Agent.
     *
     * @param {MultiOn.BrowseInput} request
     * @param {MultiOnClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MultiOn.BadRequestError}
     * @throws {@link MultiOn.UnauthorizedError}
     * @throws {@link MultiOn.PaymentRequiredError}
     * @throws {@link MultiOn.UnprocessableEntityError}
     * @throws {@link MultiOn.InternalServerError}
     *
     * @example
     *     await client.browse({
     *         cmd: "Find the top post on Hackernews.",
     *         url: "https://news.ycombinator.com/"
     *     })
     */
    browse(request: MultiOn.BrowseInput, requestOptions?: MultiOnClient.RequestOptions): Promise<MultiOn.BrowseOutput>;
    /**
     * Retrieve data from webpage based on a url and natural language command that guides agents data extraction process.
     *
     * The function can create a new session or be used as part of a session.
     *
     * @param {MultiOn.RetrieveInput} request
     * @param {MultiOnClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MultiOn.UnprocessableEntityError}
     *
     * @example
     *     await client.retrieve({
     *         cmd: "Find the top post on Hackernews and get its title and points.",
     *         url: "https://news.ycombinator.com/",
     *         fields: ["title", "points"]
     *     })
     */
    retrieve(request: MultiOn.RetrieveInput, requestOptions?: MultiOnClient.RequestOptions): Promise<MultiOn.RetrieveOutput>;
    protected _sessions: Sessions | undefined;
    get sessions(): Sessions;
    protected _getCustomAuthorizationHeaders(): Promise<{
        X_MULTION_API_KEY: string;
    }>;
}
