/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as MultiOn from "../../../index";
export declare namespace Sessions {
    interface Options {
        environment?: core.Supplier<environments.MultiOnEnvironment | string>;
        apiKey: core.Supplier<string>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
        abortSignal?: AbortSignal;
    }
}
export declare class Sessions {
    protected readonly _options: Sessions.Options;
    constructor(_options: Sessions.Options);
    /**
     * Creates a new session and returns session details including a unique session ID. A session remains active for 10 minutes of inactivity.
     *
     * @param {MultiOn.CreateSessionInput} request
     * @param {Sessions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MultiOn.UnprocessableEntityError}
     *
     * @example
     *     await client.sessions.create({
     *         url: "url"
     *     })
     */
    create(request: MultiOn.CreateSessionInput, requestOptions?: Sessions.RequestOptions): Promise<MultiOn.SessionCreated>;
    /**
     * Allows for browsing the web using detailed natural language instructions in a step mode for a session with a given session ID
     */
    stepStream(sessionId: string, request: MultiOn.SessionsStepStreamRequest, requestOptions?: Sessions.RequestOptions): Promise<core.Stream<MultiOn.SessionStepStreamChunk>>;
    /**
     * Allows for browsing the web using detailed natural language instructions in a step mode for a session with a given session ID
     *
     * @param {string} sessionId
     * @param {MultiOn.SessionsStepRequest} request
     * @param {Sessions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MultiOn.UnprocessableEntityError}
     *
     * @example
     *     await client.sessions.step("session_id", {
     *         cmd: "cmd"
     *     })
     */
    step(sessionId: string, request: MultiOn.SessionsStepRequest, requestOptions?: Sessions.RequestOptions): Promise<MultiOn.SessionStepSuccess>;
    /**
     * Closes the session.
     *
     * @param {string} sessionId
     * @param {Sessions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MultiOn.UnprocessableEntityError}
     *
     * @example
     *     await client.sessions.close("session_id")
     */
    close(sessionId: string, requestOptions?: Sessions.RequestOptions): Promise<MultiOn.SessionsCloseResponse>;
    /**
     * Retrieve the screenshot of the session.
     *
     * @param {string} sessionId
     * @param {Sessions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MultiOn.UnprocessableEntityError}
     *
     * @example
     *     await client.sessions.screenshot("session_id")
     */
    screenshot(sessionId: string, requestOptions?: Sessions.RequestOptions): Promise<MultiOn.SessionsScreenshotResponse>;
    /**
     * Retrieve a list of active session IDs.
     *
     * @param {Sessions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.sessions.list()
     */
    list(requestOptions?: Sessions.RequestOptions): Promise<MultiOn.SessionsListResponse>;
    protected _getCustomAuthorizationHeaders(): Promise<{
        X_MULTION_API_KEY: string;
    }>;
}
